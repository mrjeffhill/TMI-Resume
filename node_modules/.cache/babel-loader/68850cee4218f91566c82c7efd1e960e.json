{"ast":null,"code":"const mapHelpers = {\n  calculateRoute: function (from, to) {\n    // Center initialized to Naples, Italy\n    var myOptions = {\n      zoom: 10,\n      center: new google.maps.LatLng(myLatLng),\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    }; // Draw the map\n\n    var mapObject = map; //var directionsRenderer = new google.maps.DirectionsRenderer();\n    //directionsRenderer.setMap(mapObject);\n\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRequest = {\n      origin: from,\n      destination: to,\n      travelMode: google.maps.DirectionsTravelMode.DRIVING,\n      unitSystem: google.maps.UnitSystem.METRIC\n    };\n    directionsService.route(directionsRequest, function (response, status) {\n      if (status == google.maps.DirectionsStatus.OK) {\n        //directionsDisplay.setOptions({suppressMarkers: true});\n        new google.maps.DirectionsRenderer({\n          map: mapObject,\n          directions: response,\n          suppressMarkers: true,\n          polylineOptions: {\n            //icons: [],\n            strokeColor: \"#232020\",\n            strokeOpacity: \".7\",\n            strokeWeight: \"6\" //draggable: true\n            //editable: true\n\n          }\n        });\n        map.setCenter(bounds.getCenter()); //.fitBounds(map.getBounds(), 50);\n      } else {\n        /* JQUERY\n        $(\"#error\").append(\"Unable to retrieve your route<br />\");*/\n        console.log(\"directions response: \" + response);\n      }\n    });\n  },\n  getUserLoc: function () {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }; //console.log(pos);\n        //pos = testLL;\n        //infoWindow.setPosition(pos);\n        //infoWindow.setContent('Location found.');\n        //infoWindow.open(map);\n        //map.setCenter(pos);\n\n        var service = new google.maps.DistanceMatrixService();\n        service.getDistanceMatrix({\n          origins: [pos],\n          destinations: [myLatLng],\n          travelMode: \"DRIVING\",\n          unitSystem: google.maps.UnitSystem.IMPERIAL,\n          avoidHighways: false,\n          avoidTolls: false\n        }, function (response, status) {\n          if (status !== \"OK\") {\n            // BOO\n            alert(\"Error was: \" + status);\n          } else {\n            // YAY\n            console.log(\"get distance response\" + response);\n            var origin = response.originAddresses[0];\n            var destination = response.destinationAddresses[0]; // {text: \"308 ft\", value: 94}\n\n            var distance = response.rows[0].elements[0].distance; // {text: \"1 min\", value: 40}\n\n            var time = response.rows[0].elements[0].duration;\n            var miles = getMiles(distance.value); //console.log(originList);\n\n            var Dmarker = new google.maps.Marker({\n              position: pos,\n              map: map,\n              title: \"You\",\n              animation: google.maps.Animation.DROP,\n              icon: {\n                url: \"https://icons.iconarchive.com/icons/icons-land/vista-map-markers/256/Map-Marker-Push-Pin-2-Left-Azure-icon.png\",\n                scaledSize: new google.maps.Size(64, 64)\n              }\n            });\n            let output = \"Your current location <strong>( \" + origin + \" )</strong> is about \" + miles + \" miles away. <br />Google thinks it would take me about <strong>\" + time.text + \"</strong> to get there. I'm pretty sure I could do it in less!\";\n            /* JQUERY\n            $(\".res-map .res-map-info p\")\n              .html(output)\n              .removeClass(\"thinking\");*/\n\n            calculateRoute(origin, destination);\n          }\n        });\n      }, function () {\n        handleLocationError(true, infoWindow, map.getCenter());\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  },\n  handleLocationError: function (browserHasGeolocation, infoWindow, pos) {\n    console.log(\"location error: \" + pos);\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(browserHasGeolocation ? \"Error: The Geolocation service failed.\" : \"Error: Your browser doesn't support geolocation.\");\n    infoWindow.open(map);\n    /* JQUERY\n    $(\".res-map .res-map-info p\")\n      .html(\"<p>Well that's awkward.</p>\")\n      .removeClass(\"thinking\");*/\n  }\n};","map":{"version":3,"sources":["/Users/jeff/Documents/React Sandbox/resume-resume/src/components/mapHelpers.js"],"names":["mapHelpers","calculateRoute","from","to","myOptions","zoom","center","google","maps","LatLng","myLatLng","mapTypeId","MapTypeId","ROADMAP","mapObject","map","directionsService","DirectionsService","directionsRequest","origin","destination","travelMode","DirectionsTravelMode","DRIVING","unitSystem","UnitSystem","METRIC","route","response","status","DirectionsStatus","OK","DirectionsRenderer","directions","suppressMarkers","polylineOptions","strokeColor","strokeOpacity","strokeWeight","setCenter","bounds","getCenter","console","log","getUserLoc","navigator","geolocation","getCurrentPosition","position","pos","lat","coords","latitude","lng","longitude","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","IMPERIAL","avoidHighways","avoidTolls","alert","originAddresses","destinationAddresses","distance","rows","elements","time","duration","miles","getMiles","value","Dmarker","Marker","title","animation","Animation","DROP","icon","url","scaledSize","Size","output","text","handleLocationError","infoWindow","browserHasGeolocation","setPosition","setContent","open"],"mappings":"AAAA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,cAAc,EAAE,UAASC,IAAT,EAAeC,EAAf,EAAmB;AACjC;AACA,QAAIC,SAAS,GAAG;AACdC,MAAAA,IAAI,EAAE,EADQ;AAEdC,MAAAA,MAAM,EAAE,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAhB,CAAuBC,QAAvB,CAFM;AAGdC,MAAAA,SAAS,EAAEJ,MAAM,CAACC,IAAP,CAAYI,SAAZ,CAAsBC;AAHnB,KAAhB,CAFiC,CAOjC;;AACA,QAAIC,SAAS,GAAGC,GAAhB,CARiC,CAUjC;AACA;;AAEA,QAAIC,iBAAiB,GAAG,IAAIT,MAAM,CAACC,IAAP,CAAYS,iBAAhB,EAAxB;AACA,QAAIC,iBAAiB,GAAG;AACtBC,MAAAA,MAAM,EAAEjB,IADc;AAEtBkB,MAAAA,WAAW,EAAEjB,EAFS;AAGtBkB,MAAAA,UAAU,EAAEd,MAAM,CAACC,IAAP,CAAYc,oBAAZ,CAAiCC,OAHvB;AAItBC,MAAAA,UAAU,EAAEjB,MAAM,CAACC,IAAP,CAAYiB,UAAZ,CAAuBC;AAJb,KAAxB;AAOAV,IAAAA,iBAAiB,CAACW,KAAlB,CAAwBT,iBAAxB,EAA2C,UAASU,QAAT,EAAmBC,MAAnB,EAA2B;AACpE,UAAIA,MAAM,IAAItB,MAAM,CAACC,IAAP,CAAYsB,gBAAZ,CAA6BC,EAA3C,EAA+C;AAC7C;AACA,YAAIxB,MAAM,CAACC,IAAP,CAAYwB,kBAAhB,CAAmC;AACjCjB,UAAAA,GAAG,EAAED,SAD4B;AAEjCmB,UAAAA,UAAU,EAAEL,QAFqB;AAGjCM,UAAAA,eAAe,EAAE,IAHgB;AAIjCC,UAAAA,eAAe,EAAE;AACf;AACAC,YAAAA,WAAW,EAAE,SAFE;AAGfC,YAAAA,aAAa,EAAE,IAHA;AAIfC,YAAAA,YAAY,EAAE,GAJC,CAKf;AACA;;AANe;AAJgB,SAAnC;AAaAvB,QAAAA,GAAG,CAACwB,SAAJ,CAAcC,MAAM,CAACC,SAAP,EAAd,EAf6C,CAeV;AACpC,OAhBD,MAgBO;AACL;;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0Bf,QAAtC;AACD;AACF,KAtBD;AAuBD,GA7CgB;AA+CjBgB,EAAAA,UAAU,EAAE,YAAW;AACrB;AACA,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACE,UAASC,QAAT,EAAmB;AACjB,YAAIC,GAAG,GAAG;AACRC,UAAAA,GAAG,EAAEF,QAAQ,CAACG,MAAT,CAAgBC,QADb;AAERC,UAAAA,GAAG,EAAEL,QAAQ,CAACG,MAAT,CAAgBG;AAFb,SAAV,CADiB,CAKjB;AACA;AAEA;AACA;AACA;AACA;;AAEA,YAAIC,OAAO,GAAG,IAAIhD,MAAM,CAACC,IAAP,CAAYgD,qBAAhB,EAAd;AACAD,QAAAA,OAAO,CAACE,iBAAR,CACE;AACEC,UAAAA,OAAO,EAAE,CAACT,GAAD,CADX;AAEEU,UAAAA,YAAY,EAAE,CAACjD,QAAD,CAFhB;AAGEW,UAAAA,UAAU,EAAE,SAHd;AAIEG,UAAAA,UAAU,EAAEjB,MAAM,CAACC,IAAP,CAAYiB,UAAZ,CAAuBmC,QAJrC;AAKEC,UAAAA,aAAa,EAAE,KALjB;AAMEC,UAAAA,UAAU,EAAE;AANd,SADF,EASE,UAASlC,QAAT,EAAmBC,MAAnB,EAA2B;AACzB,cAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB;AACAkC,YAAAA,KAAK,CAAC,gBAAgBlC,MAAjB,CAAL;AACD,WAHD,MAGO;AACL;AAEAa,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0Bf,QAAtC;AAEA,gBAAIT,MAAM,GAAGS,QAAQ,CAACoC,eAAT,CAAyB,CAAzB,CAAb;AACA,gBAAI5C,WAAW,GAAGQ,QAAQ,CAACqC,oBAAT,CAA8B,CAA9B,CAAlB,CANK,CAOL;;AACA,gBAAIC,QAAQ,GAAGtC,QAAQ,CAACuC,IAAT,CAAc,CAAd,EAAiBC,QAAjB,CAA0B,CAA1B,EAA6BF,QAA5C,CARK,CASL;;AACA,gBAAIG,IAAI,GAAGzC,QAAQ,CAACuC,IAAT,CAAc,CAAd,EAAiBC,QAAjB,CAA0B,CAA1B,EAA6BE,QAAxC;AACA,gBAAIC,KAAK,GAAGC,QAAQ,CAACN,QAAQ,CAACO,KAAV,CAApB,CAXK,CAYL;;AAEA,gBAAIC,OAAO,GAAG,IAAInE,MAAM,CAACC,IAAP,CAAYmE,MAAhB,CAAuB;AACnC3B,cAAAA,QAAQ,EAAEC,GADyB;AAEnClC,cAAAA,GAAG,EAAEA,GAF8B;AAGnC6D,cAAAA,KAAK,EAAE,KAH4B;AAInCC,cAAAA,SAAS,EAAEtE,MAAM,CAACC,IAAP,CAAYsE,SAAZ,CAAsBC,IAJE;AAKnCC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,GAAG,EACD,gHAFE;AAGJC,gBAAAA,UAAU,EAAE,IAAI3E,MAAM,CAACC,IAAP,CAAY2E,IAAhB,CAAqB,EAArB,EAAyB,EAAzB;AAHR;AAL6B,aAAvB,CAAd;AAYA,gBAAIC,MAAM,GACR,qCACAjE,MADA,GAEA,uBAFA,GAGAoD,KAHA,GAIA,kEAJA,GAKAF,IAAI,CAACgB,IALL,GAMA,gEAPF;AAQA;;;;;AAKApF,YAAAA,cAAc,CAACkB,MAAD,EAASC,WAAT,CAAd;AACD;AACF,SAtDH;AAwDD,OAvEH,EAwEE,YAAW;AACTkE,QAAAA,mBAAmB,CAAC,IAAD,EAAOC,UAAP,EAAmBxE,GAAG,CAAC0B,SAAJ,EAAnB,CAAnB;AACD,OA1EH;AA4ED,KA7ED,MA6EO;AACL;AACA6C,MAAAA,mBAAmB,CAAC,KAAD,EAAQC,UAAR,EAAoBxE,GAAG,CAAC0B,SAAJ,EAApB,CAAnB;AACD;AACF,GAlIgB;AAoIjB6C,EAAAA,mBAAmB,EAAE,UAASE,qBAAT,EAAgCD,UAAhC,EAA4CtC,GAA5C,EAAiD;AACpEP,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBM,GAAjC;AACAsC,IAAAA,UAAU,CAACE,WAAX,CAAuBxC,GAAvB;AACAsC,IAAAA,UAAU,CAACG,UAAX,CACEF,qBAAqB,GACjB,wCADiB,GAEjB,kDAHN;AAKAD,IAAAA,UAAU,CAACI,IAAX,CAAgB5E,GAAhB;AACA;;;;AAID;AAjJgB,CAAnB","sourcesContent":["const mapHelpers = {\n  calculateRoute: function(from, to) {\n    // Center initialized to Naples, Italy\n    var myOptions = {\n      zoom: 10,\n      center: new google.maps.LatLng(myLatLng),\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n    // Draw the map\n    var mapObject = map;\n\n    //var directionsRenderer = new google.maps.DirectionsRenderer();\n    //directionsRenderer.setMap(mapObject);\n\n    var directionsService = new google.maps.DirectionsService();\n    var directionsRequest = {\n      origin: from,\n      destination: to,\n      travelMode: google.maps.DirectionsTravelMode.DRIVING,\n      unitSystem: google.maps.UnitSystem.METRIC\n    };\n\n    directionsService.route(directionsRequest, function(response, status) {\n      if (status == google.maps.DirectionsStatus.OK) {\n        //directionsDisplay.setOptions({suppressMarkers: true});\n        new google.maps.DirectionsRenderer({\n          map: mapObject,\n          directions: response,\n          suppressMarkers: true,\n          polylineOptions: {\n            //icons: [],\n            strokeColor: \"#232020\",\n            strokeOpacity: \".7\",\n            strokeWeight: \"6\"\n            //draggable: true\n            //editable: true\n          }\n        });\n        map.setCenter(bounds.getCenter()); //.fitBounds(map.getBounds(), 50);\n      } else {\n        /* JQUERY\n        $(\"#error\").append(\"Unable to retrieve your route<br />\");*/\n        console.log(\"directions response: \" + response);\n      }\n    });\n  },\n\n  getUserLoc: function() {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        function(position) {\n          var pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          //console.log(pos);\n          //pos = testLL;\n\n          //infoWindow.setPosition(pos);\n          //infoWindow.setContent('Location found.');\n          //infoWindow.open(map);\n          //map.setCenter(pos);\n\n          var service = new google.maps.DistanceMatrixService();\n          service.getDistanceMatrix(\n            {\n              origins: [pos],\n              destinations: [myLatLng],\n              travelMode: \"DRIVING\",\n              unitSystem: google.maps.UnitSystem.IMPERIAL,\n              avoidHighways: false,\n              avoidTolls: false\n            },\n            function(response, status) {\n              if (status !== \"OK\") {\n                // BOO\n                alert(\"Error was: \" + status);\n              } else {\n                // YAY\n\n                console.log(\"get distance response\" + response);\n\n                var origin = response.originAddresses[0];\n                var destination = response.destinationAddresses[0];\n                // {text: \"308 ft\", value: 94}\n                var distance = response.rows[0].elements[0].distance;\n                // {text: \"1 min\", value: 40}\n                var time = response.rows[0].elements[0].duration;\n                var miles = getMiles(distance.value);\n                //console.log(originList);\n\n                var Dmarker = new google.maps.Marker({\n                  position: pos,\n                  map: map,\n                  title: \"You\",\n                  animation: google.maps.Animation.DROP,\n                  icon: {\n                    url:\n                      \"https://icons.iconarchive.com/icons/icons-land/vista-map-markers/256/Map-Marker-Push-Pin-2-Left-Azure-icon.png\",\n                    scaledSize: new google.maps.Size(64, 64)\n                  }\n                });\n\n                let output =\n                  \"Your current location <strong>( \" +\n                  origin +\n                  \" )</strong> is about \" +\n                  miles +\n                  \" miles away. <br />Google thinks it would take me about <strong>\" +\n                  time.text +\n                  \"</strong> to get there. I'm pretty sure I could do it in less!\";\n                /* JQUERY\n                $(\".res-map .res-map-info p\")\n                  .html(output)\n                  .removeClass(\"thinking\");*/\n\n                calculateRoute(origin, destination);\n              }\n            }\n          );\n        },\n        function() {\n          handleLocationError(true, infoWindow, map.getCenter());\n        }\n      );\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  },\n\n  handleLocationError: function(browserHasGeolocation, infoWindow, pos) {\n    console.log(\"location error: \" + pos);\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(\n      browserHasGeolocation\n        ? \"Error: The Geolocation service failed.\"\n        : \"Error: Your browser doesn't support geolocation.\"\n    );\n    infoWindow.open(map);\n    /* JQUERY\n    $(\".res-map .res-map-info p\")\n      .html(\"<p>Well that's awkward.</p>\")\n      .removeClass(\"thinking\");*/\n  }\n};\n"]},"metadata":{},"sourceType":"module"}