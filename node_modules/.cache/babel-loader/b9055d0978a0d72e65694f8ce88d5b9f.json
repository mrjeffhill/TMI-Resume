{"ast":null,"code":"var _jsxFileName = \"/Users/jeff/Documents/React Sandbox/resume-resume/src/components/debugger.js\";\nimport * as React from \"react\";\nimport { AppData } from \"./appdata\";\nimport helpers from \"./helpers\";\n\nclass Debugger extends React.Component {\n  // ***** access via this.context\n  constructor(props) {\n    super(props);\n    this.state = {\n      ua: {},\n      ip: \"\",\n      ipData: {}\n    };\n    this.escFunction = this.escFunction.bind(this);\n  }\n\n  escFunction(event) {\n    if (event.keyCode === 27) {\n      //Do whatever when esc is pressed\n      alert(\"OHAI!!!\");\n    }\n  }\n\n  componentWillMount() {\n    var ua = helpers.getDevicive(navigator.userAgent);\n    var ip = \"\";\n    var ipData = {};\n\n    var http = require('http');\n\n    http.get({\n      'host': 'api.ipify.org',\n      'port': 80,\n      'path': '/'\n    }, function (resp) {\n      resp.on('data', function (ip) {\n        //console.log(\"My public IP address is: \" + ip);\n        ip = ip;\n        ipData = helpers.getSniffy(ip);\n      });\n    });\n    this.setState({\n      ua: ua,\n      ip: ip,\n      ipData: ipData\n    });\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.escFunction, false);\n    console.log(this.state.ip);\n    console.log(this.state.ipData);\n    console.log(this.state.ua);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.escFunction, false);\n  }\n\n  render() {\n    console.log(this.state.ip);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nDebugger.contextType = AppData;\nexport default Debugger;","map":{"version":3,"sources":["/Users/jeff/Documents/React Sandbox/resume-resume/src/components/debugger.js"],"names":["React","AppData","helpers","Debugger","Component","constructor","props","state","ua","ip","ipData","escFunction","bind","event","keyCode","alert","componentWillMount","getDevicive","navigator","userAgent","http","require","get","resp","on","getSniffy","setState","componentDidMount","document","addEventListener","console","log","componentWillUnmount","removeEventListener","render","contextType"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AACT;AAE5BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,EAAE,EAAE,EADO;AAEXC,MAAAA,EAAE,EAAE,EAFO;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAb;AAKA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AACDD,EAAAA,WAAW,CAACE,KAAD,EAAO;AAChB,QAAGA,KAAK,CAACC,OAAN,KAAkB,EAArB,EAAyB;AACvB;AACAC,MAAAA,KAAK,CAAC,SAAD,CAAL;AACD;AACF;;AAEDC,EAAAA,kBAAkB,GAAE;AAClB,QAAIR,EAAE,GAAGN,OAAO,CAACe,WAAR,CAAoBC,SAAS,CAACC,SAA9B,CAAT;AACA,QAAIV,EAAE,GAAG,EAAT;AACA,QAAIC,MAAM,GAAG,EAAb;;AAEA,QAAIU,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEAD,IAAAA,IAAI,CAACE,GAAL,CAAS;AAAC,cAAQ,eAAT;AAA0B,cAAQ,EAAlC;AAAsC,cAAQ;AAA9C,KAAT,EAA6D,UAASC,IAAT,EAAe;AAC1EA,MAAAA,IAAI,CAACC,EAAL,CAAQ,MAAR,EAAgB,UAASf,EAAT,EAAa;AAC3B;AACAA,QAAAA,EAAE,GAAGA,EAAL;AACAC,QAAAA,MAAM,GAAGR,OAAO,CAACuB,SAAR,CAAkBhB,EAAlB,CAAT;AACD,OAJD;AAKD,KAND;AASA,SAAKiB,QAAL,CAAc;AAAElB,MAAAA,EAAE,EAAEA,EAAN;AAAUC,MAAAA,EAAE,EAAEA,EAAd;AAAkBC,MAAAA,MAAM,EAAEA;AAA1B,KAAd;AACD;;AACDiB,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKlB,WAA1C,EAAuD,KAAvD;AAEAmB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWE,EAAvB;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWG,MAAvB;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWC,EAAvB;AAED;;AACDwB,EAAAA,oBAAoB,GAAE;AACpBJ,IAAAA,QAAQ,CAACK,mBAAT,CAA6B,SAA7B,EAAwC,KAAKtB,WAA7C,EAA0D,KAA1D;AACD;;AACDuB,EAAAA,MAAM,GAAE;AACJJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWE,EAAvB;AACF,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AArDoC;;AAAjCN,Q,CACCgC,W,GAAclC,O;AAuDrB,eAAeE,QAAf","sourcesContent":["import * as React from \"react\";\nimport { AppData } from \"./appdata\";\nimport helpers from \"./helpers\";\n\nclass Debugger extends React.Component {\nstatic contextType = AppData; // ***** access via this.context\n\n  constructor(props){\n    super(props);\n    this.state = {\n      ua: {},\n      ip: \"\",\n      ipData: {}\n    };\n    this.escFunction = this.escFunction.bind(this);\n  }\n  escFunction(event){\n    if(event.keyCode === 27) {\n      //Do whatever when esc is pressed\n      alert(\"OHAI!!!\");\n    }\n  }\n\n  componentWillMount(){\n    var ua = helpers.getDevicive(navigator.userAgent);\n    var ip = \"\";\n    var ipData = {};\n\n    var http = require('http');\n\n    http.get({'host': 'api.ipify.org', 'port': 80, 'path': '/'}, function(resp) {\n      resp.on('data', function(ip) {\n        //console.log(\"My public IP address is: \" + ip);\n        ip = ip;\n        ipData = helpers.getSniffy(ip);\n      });\n    });\n\n\n    this.setState({ ua: ua, ip: ip, ipData: ipData });\n  }\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.escFunction, false);\n\n    console.log(this.state.ip);\n    console.log(this.state.ipData);\n    console.log(this.state.ua);\n\n  }\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.escFunction, false);\n  }\n  render(){\n      console.log(this.state.ip);\n    return (   \n      <div></div>\n    )\n  }\n}\n\nexport default Debugger;"]},"metadata":{},"sourceType":"module"}