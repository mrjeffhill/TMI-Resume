{"ast":null,"code":"var _jsxFileName = \"/Users/jeff/Documents/React Sandbox/resume-resume/src/components/map.js\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppData } from \"./appdata\";\nimport GoogleMapReact from \"google-map-react\";\n\nconst AnyReactComponent = ({\n  text\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 41\n  }\n}, text);\n\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n  places.forEach(place => {\n    bounds.extend(new maps.LatLng(place.geometry.location.lat, place.geometry.location.lng));\n  });\n  return bounds;\n}; // Re-center map when resizing the window\n\n\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, \"idle\", () => {\n    maps.event.addDomListener(window, \"resize\", () => {\n      map.fitBounds(bounds);\n    });\n  });\n}; // Fit map to its bounds after the api is loaded\n\n\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places); // Fit map to bounds\n\n  map.fitBounds(bounds); // Bind the resize listener\n\n  bindResizeListener(map, maps, bounds);\n};\n\nclass Commute extends React.Component {\n  // ***** access via this.context\n\n  /*\n  state = {\n    data: [],\n    loc_x: 0,\n    loc_y: 0,\n    userLL: {},\n    locRendered: false,\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  };\n  */\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: [],\n      center: this.context.myLatLng,\n      zoom: 11\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      places: this.context.myLatLng\n    });\n  }\n\n  componentWillUpdate(nextProps, nextState) {}\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  render() {\n    //console.log(this.context.introVisible);\n    const context = this.context;\n    const {\n      places\n    } = this.state;\n    const mapActiveClass = context.mapVisible ? \"res-map full-view active\" : \"res-map full-view\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"Map\",\n      className: mapActiveClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"Commute\",\n      style: {\n        height: \"100vh\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: \"AIzaSyBl1YIXtw0RdoIw7Qo5h7Q32IIy3zkw6C0\"\n      },\n      defaultCenter: this.props.center,\n      defaultZoom: this.props.zoom,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps,\n        places\n      }) => apiIsLoaded(map, maps, places),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(AnyReactComponent, {\n      lat: 59.955413,\n      lng: 30.337844,\n      text: \"My Marker\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"res-map-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"thinking\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"Calculating my commute to you.\")));\n  }\n  /*\n  render() {\n    //console.log(this.context.introVisible);\n    const context = this.context;\n     const mapActiveClass = context.mapVisible\n      ? \"res-map full-view active\"\n      : \"res-map full-view\";\n     return (\n      <div id=\"Map\" className={mapActiveClass}>\n        <div id=\"Commute\">\n          \n          <Map\n            google={google}\n            zoom={14}\n            style={containerStyle}\n            styles={this.props.mapStyles}\n            containerStyle={containerStyle}\n            initialCenter={context.myLatLng}\n            disableDefaultUI={true}\n            backgroundColor=\"hsla(0, 0%, 0%, 0)\"\n            onClick={this.onMapClicked}\n            onDragend={this.centerMoved}\n            mapTypeControlOptions={{\n              mapTypeIds: [\n                \"roadmap\",\n                \"satellite\",\n                \"hybrid\",\n                \"terrain\",\n                \"styled_map\"\n              ]\n            }}\n          >\n            <Marker\n              position={context.myLatLng}\n              title=\"Me\"\n              animation={google.maps.Animation.DROP}\n              icon={{\n                url:\n                  \"https://icons.iconarchive.com/icons/icons-land/vista-map-markers/128/Map-Marker-Push-Pin-2-Right-Chartreuse-icon.png\",\n                scaledSize: new google.maps.Size(64, 64)\n              }}\n              onClick={this.onMarkerClick}\n              onMouseover={this.onMouseoverMarker}\n              name={\"My location\"}\n            >\n              <InfoWindow\n                marker={this.state.activeMarker}\n                onOpen={this.windowHasOpened}\n                onClose={this.windowHasClosed}\n                visible={this.state.showingInfoWindow}\n              >\n                <div>\n                  <h1>{this.state.selectedPlace.name}</h1>\n                </div>\n              </InfoWindow>\n            </Marker>\n            \n            <Marker\n              position={this.state.myLatLng}\n              title=\"You\"\n              animation={google.maps.Animation.DROP}\n              icon={{\n                url:\n                  \"https://icons.iconarchive.com/icons/icons-land/vista-map-markers/256/Map-Marker-Push-Pin-2-Left-Azure-icon.png\",\n                scaledSize: new google.maps.Size(64, 64)\n              }}\n              onClick={this.onMarkerClick}\n              onMouseover={this.onMouseoverMarker}\n              name={\"Your location\"}\n            >\n              <InfoWindow\n                marker={this.state.activeMarker}\n                onOpen={this.windowHasOpened}\n                onClose={this.windowHasClosed}\n                visible={this.state.showingInfoWindow}\n              >\n                <div>\n                  <h1>{this.state.selectedPlace.name}</h1>\n                </div>\n              </InfoWindow>\n            </Marker>\n          </Map>\n        </div>\n        <div className=\"res-map-info\">\n          <p className=\"thinking\">Calculating my commute to you.</p>\n        </div>\n      </div>\n    );\n  }\n  */\n\n\n}\n/*\nCommute.defaultProps = {\n  backgroundColor: \"hsla(0, 0%, 0%, 0)\",\n  mapStyles: [\n    {\n      featureType: \"all\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"administrative.country\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"on\" }]\n    },\n    {\n      featureType: \"administrative.country\",\n      elementType: \"labels.text.fill\",\n      stylers: [{ color: \"#ff0000\" }]\n    },\n    {\n      featureType: \"administrative.country\",\n      elementType: \"labels.text.stroke\",\n      stylers: [{ color: \"#3a3535\" }]\n    },\n    {\n      featureType: \"administrative.province\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"on\" }]\n    },\n    {\n      featureType: \"administrative.province\",\n      elementType: \"labels.text.fill\",\n      stylers: [{ color: \"#ff0000\" }]\n    },\n    {\n      featureType: \"administrative.province\",\n      elementType: \"labels.text.stroke\",\n      stylers: [{ color: \"#3a3535\" }]\n    },\n    {\n      featureType: \"administrative.locality\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"administrative.locality\",\n      elementType: \"labels.text.fill\",\n      stylers: [{ color: \"#ffffff\" }]\n    },\n    {\n      featureType: \"administrative.locality\",\n      elementType: \"labels.text.stroke\",\n      stylers: [\n        { color: \"#756151\" },\n        { lightness: \"15\" },\n        { saturation: \"2\" },\n        { gamma: \"3.67\" }\n      ]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"simplified\" }, { color: \"#f0af54\" }]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"labels.text\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"labels.icon\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"simplified\" }, { color: \"#f0af54\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"labels.text\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"labels.icon\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.arterial\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.arterial\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"simplified\" }, { color: \"#d2c1a5\" }]\n    },\n    {\n      featureType: \"road.arterial\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.local\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.local\",\n      elementType: \"geometry.fill\",\n      stylers: [{ color: \"#c4a983\" }, { visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.local\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"geometry\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"off\" }, { color: \"#e3ce9f\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"geometry.stroke\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }]\n    }\n  ]\n};\n*/\n\n\nCommute.contextType = AppData;\nexport default Commute;","map":{"version":3,"sources":["/Users/jeff/Documents/React Sandbox/resume-resume/src/components/map.js"],"names":["React","ReactDOM","AppData","GoogleMapReact","AnyReactComponent","text","getMapBounds","map","maps","places","bounds","LatLngBounds","forEach","place","extend","LatLng","geometry","location","lat","lng","bindResizeListener","event","addDomListenerOnce","addDomListener","window","fitBounds","apiIsLoaded","Commute","Component","constructor","props","state","center","context","myLatLng","zoom","componentDidMount","setState","componentWillUpdate","nextProps","nextState","componentDidUpdate","prevProps","prevState","render","mapActiveClass","mapVisible","height","width","key","contextType"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAMA,IAAN,CAAxC;;AAEA,MAAMC,YAAY,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,KAAuB;AAC1C,QAAMC,MAAM,GAAG,IAAIF,IAAI,CAACG,YAAT,EAAf;AAEAF,EAAAA,MAAM,CAACG,OAAP,CAAeC,KAAK,IAAI;AACtBH,IAAAA,MAAM,CAACI,MAAP,CACE,IAAIN,IAAI,CAACO,MAAT,CAAgBF,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBC,GAAxC,EAA6CL,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBE,GAArE,CADF;AAGD,GAJD;AAKA,SAAOT,MAAP;AACD,CATD,C,CAWA;;;AACA,MAAMU,kBAAkB,GAAG,CAACb,GAAD,EAAMC,IAAN,EAAYE,MAAZ,KAAuB;AAChDF,EAAAA,IAAI,CAACa,KAAL,CAAWC,kBAAX,CAA8Bf,GAA9B,EAAmC,MAAnC,EAA2C,MAAM;AAC/CC,IAAAA,IAAI,CAACa,KAAL,CAAWE,cAAX,CAA0BC,MAA1B,EAAkC,QAAlC,EAA4C,MAAM;AAChDjB,MAAAA,GAAG,CAACkB,SAAJ,CAAcf,MAAd;AACD,KAFD;AAGD,GAJD;AAKD,CAND,C,CAQA;;;AACA,MAAMgB,WAAW,GAAG,CAACnB,GAAD,EAAMC,IAAN,EAAYC,MAAZ,KAAuB;AACzC;AACA,QAAMC,MAAM,GAAGJ,YAAY,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,CAA3B,CAFyC,CAGzC;;AACAF,EAAAA,GAAG,CAACkB,SAAJ,CAAcf,MAAd,EAJyC,CAKzC;;AACAU,EAAAA,kBAAkB,CAACb,GAAD,EAAMC,IAAN,EAAYE,MAAZ,CAAlB;AACD,CAPD;;AASA,MAAMiB,OAAN,SAAsB3B,KAAK,CAAC4B,SAA5B,CAAsC;AACN;;AAE9B;;;;;;;;;;;;AAaAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXtB,MAAAA,MAAM,EAAE,EADG;AAEXuB,MAAAA,MAAM,EAAE,KAAKC,OAAL,CAAaC,QAFV;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAAE5B,MAAAA,MAAM,EAAE,KAAKwB,OAAL,CAAaC;AAAvB,KAAd;AACD;;AACDI,EAAAA,mBAAmB,CAACC,SAAD,EAAYC,SAAZ,EAAuB,CAAE;;AAC5CC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB,CAAE;;AAE3CC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMX,OAAO,GAAG,KAAKA,OAArB;AACA,UAAM;AAAExB,MAAAA;AAAF,QAAa,KAAKsB,KAAxB;AAEA,UAAMc,cAAc,GAAGZ,OAAO,CAACa,UAAR,GACnB,0BADmB,GAEnB,mBAFJ;AAIA,wBACE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,SAAS,EAAED,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,KAAK,EAAE;AAA1B,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AACE,MAAA,gBAAgB,EAAE;AAChBC,QAAAA,GAAG,EAAE;AADW,OADpB;AAIE,MAAA,aAAa,EAAE,KAAKnB,KAAL,CAAWE,MAJ5B;AAKE,MAAA,WAAW,EAAE,KAAKF,KAAL,CAAWK,IAL1B;AAME,MAAA,kCAAkC,MANpC;AAOE,MAAA,iBAAiB,EAAE,CAAC;AAAE5B,QAAAA,GAAF;AAAOC,QAAAA,IAAP;AAAaC,QAAAA;AAAb,OAAD,KACjBiB,WAAW,CAACnB,GAAD,EAAMC,IAAN,EAAYC,MAAZ,CARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAWE,oBAAC,iBAAD;AACE,MAAA,GAAG,EAAE,SADP;AAEE,MAAA,GAAG,EAAE,SAFP;AAGE,MAAA,IAAI,EAAC,WAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF,CADF,eAoBE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,CApBF,CADF;AA0BD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArEoC;AAkKtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlKMkB,O,CACGuB,W,GAAchD,O;AA+TvB,eAAeyB,OAAf","sourcesContent":["import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppData } from \"./appdata\";\nimport GoogleMapReact from \"google-map-react\";\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n\n  places.forEach(place => {\n    bounds.extend(\n      new maps.LatLng(place.geometry.location.lat, place.geometry.location.lng)\n    );\n  });\n  return bounds;\n};\n\n// Re-center map when resizing the window\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, \"idle\", () => {\n    maps.event.addDomListener(window, \"resize\", () => {\n      map.fitBounds(bounds);\n    });\n  });\n};\n\n// Fit map to its bounds after the api is loaded\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places);\n  // Fit map to bounds\n  map.fitBounds(bounds);\n  // Bind the resize listener\n  bindResizeListener(map, maps, bounds);\n};\n\nclass Commute extends React.Component {\n  static contextType = AppData; // ***** access via this.context\n\n  /*\n  state = {\n    data: [],\n    loc_x: 0,\n    loc_y: 0,\n    userLL: {},\n    locRendered: false,\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  };\n  */\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      places: [],\n      center: this.context.myLatLng,\n      zoom: 11\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ places: this.context.myLatLng });\n  }\n  componentWillUpdate(nextProps, nextState) {}\n  componentDidUpdate(prevProps, prevState) {}\n\n  render() {\n    //console.log(this.context.introVisible);\n    const context = this.context;\n    const { places } = this.state;\n\n    const mapActiveClass = context.mapVisible\n      ? \"res-map full-view active\"\n      : \"res-map full-view\";\n\n    return (\n      <div id=\"Map\" className={mapActiveClass}>\n        <div id=\"Commute\" style={{ height: \"100vh\", width: \"100%\" }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: \"AIzaSyBl1YIXtw0RdoIw7Qo5h7Q32IIy3zkw6C0\"\n            }}\n            defaultCenter={this.props.center}\n            defaultZoom={this.props.zoom}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map, maps, places }) =>\n              apiIsLoaded(map, maps, places)\n            }\n          >\n            <AnyReactComponent\n              lat={59.955413}\n              lng={30.337844}\n              text=\"My Marker\"\n            />\n          </GoogleMapReact>\n        </div>\n        <div className=\"res-map-info\">\n          <p className=\"thinking\">Calculating my commute to you.</p>\n        </div>\n      </div>\n    );\n  }\n\n  /*\n  render() {\n    //console.log(this.context.introVisible);\n    const context = this.context;\n\n    const mapActiveClass = context.mapVisible\n      ? \"res-map full-view active\"\n      : \"res-map full-view\";\n\n    return (\n      <div id=\"Map\" className={mapActiveClass}>\n        <div id=\"Commute\">\n          \n          <Map\n            google={google}\n            zoom={14}\n            style={containerStyle}\n            styles={this.props.mapStyles}\n            containerStyle={containerStyle}\n            initialCenter={context.myLatLng}\n            disableDefaultUI={true}\n            backgroundColor=\"hsla(0, 0%, 0%, 0)\"\n            onClick={this.onMapClicked}\n            onDragend={this.centerMoved}\n            mapTypeControlOptions={{\n              mapTypeIds: [\n                \"roadmap\",\n                \"satellite\",\n                \"hybrid\",\n                \"terrain\",\n                \"styled_map\"\n              ]\n            }}\n          >\n            <Marker\n              position={context.myLatLng}\n              title=\"Me\"\n              animation={google.maps.Animation.DROP}\n              icon={{\n                url:\n                  \"https://icons.iconarchive.com/icons/icons-land/vista-map-markers/128/Map-Marker-Push-Pin-2-Right-Chartreuse-icon.png\",\n                scaledSize: new google.maps.Size(64, 64)\n              }}\n              onClick={this.onMarkerClick}\n              onMouseover={this.onMouseoverMarker}\n              name={\"My location\"}\n            >\n              <InfoWindow\n                marker={this.state.activeMarker}\n                onOpen={this.windowHasOpened}\n                onClose={this.windowHasClosed}\n                visible={this.state.showingInfoWindow}\n              >\n                <div>\n                  <h1>{this.state.selectedPlace.name}</h1>\n                </div>\n              </InfoWindow>\n            </Marker>\n            \n            <Marker\n              position={this.state.myLatLng}\n              title=\"You\"\n              animation={google.maps.Animation.DROP}\n              icon={{\n                url:\n                  \"https://icons.iconarchive.com/icons/icons-land/vista-map-markers/256/Map-Marker-Push-Pin-2-Left-Azure-icon.png\",\n                scaledSize: new google.maps.Size(64, 64)\n              }}\n              onClick={this.onMarkerClick}\n              onMouseover={this.onMouseoverMarker}\n              name={\"Your location\"}\n            >\n              <InfoWindow\n                marker={this.state.activeMarker}\n                onOpen={this.windowHasOpened}\n                onClose={this.windowHasClosed}\n                visible={this.state.showingInfoWindow}\n              >\n                <div>\n                  <h1>{this.state.selectedPlace.name}</h1>\n                </div>\n              </InfoWindow>\n            </Marker>\n          </Map>\n        </div>\n        <div className=\"res-map-info\">\n          <p className=\"thinking\">Calculating my commute to you.</p>\n        </div>\n      </div>\n    );\n  }\n  */\n}\n/*\nCommute.defaultProps = {\n  backgroundColor: \"hsla(0, 0%, 0%, 0)\",\n  mapStyles: [\n    {\n      featureType: \"all\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"administrative.country\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"on\" }]\n    },\n    {\n      featureType: \"administrative.country\",\n      elementType: \"labels.text.fill\",\n      stylers: [{ color: \"#ff0000\" }]\n    },\n    {\n      featureType: \"administrative.country\",\n      elementType: \"labels.text.stroke\",\n      stylers: [{ color: \"#3a3535\" }]\n    },\n    {\n      featureType: \"administrative.province\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"on\" }]\n    },\n    {\n      featureType: \"administrative.province\",\n      elementType: \"labels.text.fill\",\n      stylers: [{ color: \"#ff0000\" }]\n    },\n    {\n      featureType: \"administrative.province\",\n      elementType: \"labels.text.stroke\",\n      stylers: [{ color: \"#3a3535\" }]\n    },\n    {\n      featureType: \"administrative.locality\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"administrative.locality\",\n      elementType: \"labels.text.fill\",\n      stylers: [{ color: \"#ffffff\" }]\n    },\n    {\n      featureType: \"administrative.locality\",\n      elementType: \"labels.text.stroke\",\n      stylers: [\n        { color: \"#756151\" },\n        { lightness: \"15\" },\n        { saturation: \"2\" },\n        { gamma: \"3.67\" }\n      ]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"simplified\" }, { color: \"#f0af54\" }]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"labels.text\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.highway\",\n      elementType: \"labels.icon\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"simplified\" }, { color: \"#f0af54\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"labels.text\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.highway.controlled_access\",\n      elementType: \"labels.icon\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.arterial\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.arterial\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"simplified\" }, { color: \"#d2c1a5\" }]\n    },\n    {\n      featureType: \"road.arterial\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"road.local\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.local\",\n      elementType: \"geometry.fill\",\n      stylers: [{ color: \"#c4a983\" }, { visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"road.local\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"all\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"geometry\",\n      stylers: [{ visibility: \"off\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"geometry.fill\",\n      stylers: [{ visibility: \"off\" }, { color: \"#e3ce9f\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"geometry.stroke\",\n      stylers: [{ visibility: \"simplified\" }]\n    },\n    {\n      featureType: \"water\",\n      elementType: \"labels\",\n      stylers: [{ visibility: \"off\" }]\n    }\n  ]\n};\n*/\n\nexport default Commute;\n"]},"metadata":{},"sourceType":"module"}