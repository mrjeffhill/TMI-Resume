{"ast":null,"code":"import _classCallCheck from\"/Users/jeff/Documents/React Sandbox/resume-resume/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jeff/Documents/React Sandbox/resume-resume/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/jeff/Documents/React Sandbox/resume-resume/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/jeff/Documents/React Sandbox/resume-resume/node_modules/@babel/runtime/helpers/esm/inherits\";import*as React from\"react\";import{AppData}from\"./appdata\";import SkillTab from\"./skillTab\";var SkillTabs=/*#__PURE__*/function(_React$Component){_inherits(SkillTabs,_React$Component);var _super=_createSuper(SkillTabs);function SkillTabs(){_classCallCheck(this,SkillTabs);return _super.apply(this,arguments);}_createClass(SkillTabs,[{key:\"render\",value:function render(){var context=this.context;var tabtypes=context.tabTypes;var skilllist=this.props.catSkills;var listtype=this.props.skilltype;var radioGroupName=\"skillTabs\"+this.props.id;// This is how to build a sequential counter in React for nested mappings.\n// Problem: Increment a counter from a child that lives in the parent for unique sequential HTML attributes.\n// We can't do this in React, so here's how to get around that.\n// STEP 1: Establish increment terms. Pay attention here!\nvar uniqueId=this.props.id;// Will be zero on first parent iteration.\nvar idStep=tabtypes.length;// # of parent iterations\nif(uniqueId!==0){// happens after the first iteration from parent\nuniqueId=uniqueId*idStep;}return/*#__PURE__*/React.createElement(React.Fragment,null,tabtypes.map(function(tabtype,index){// STEP 2: increment\nuniqueId=uniqueId+1;//console.log(\"Unique sequential count: \" + uniqueId);\nvar tabsClass=\"res-skill-\"+listtype+\" \"+tabtype;var radioId=\"tab\"+uniqueId;var isChecked=tabtype===\"info\";var tabIcon=\"fas fa-\"+context.tabIcons[index];var tabContentId=\"tab-content\"+uniqueId;return/*#__PURE__*/React.createElement(\"li\",{key:index,className:tabsClass},/*#__PURE__*/React.createElement(\"input\",{type:\"radio\",name:radioGroupName,id:radioId,defaultChecked:isChecked,tabIndex:uniqueId}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:radioId,tabIndex:uniqueId},/*#__PURE__*/React.createElement(\"i\",{className:tabIcon})),/*#__PURE__*/React.createElement(\"div\",{id:tabContentId,className:\"tab-content sketchy-border lined thin\",\"data-display\":listtype},/*#__PURE__*/React.createElement(SkillTab,{key:index,id:index,skilldata:skilllist,tabtype:tabtype})));}));}}]);return SkillTabs;}(React.Component);SkillTabs.contextType=AppData;export default SkillTabs;","map":{"version":3,"sources":["/Users/jeff/Documents/React Sandbox/resume-resume/src/components/skillTabs.js"],"names":["React","AppData","SkillTab","SkillTabs","context","tabtypes","tabTypes","skilllist","props","catSkills","listtype","skilltype","radioGroupName","id","uniqueId","idStep","length","map","tabtype","index","tabsClass","radioId","isChecked","tabIcon","tabIcons","tabContentId","Component","contextType"],"mappings":"ggBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,OAAT,KAAwB,WAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,C,GAEMC,CAAAA,S,yQAEK,CACP,GAAMC,CAAAA,OAAO,CAAG,KAAKA,OAArB,CAEA,GAAMC,CAAAA,QAAQ,CAAGD,OAAO,CAACE,QAAzB,CACA,GAAMC,CAAAA,SAAS,CAAG,KAAKC,KAAL,CAAWC,SAA7B,CACA,GAAMC,CAAAA,QAAQ,CAAG,KAAKF,KAAL,CAAWG,SAA5B,CACA,GAAMC,CAAAA,cAAc,CAAG,YAAc,KAAKJ,KAAL,CAAWK,EAAhD,CAEA;AACA;AACA;AACA;AACA,GAAIC,CAAAA,QAAQ,CAAG,KAAKN,KAAL,CAAWK,EAA1B,CAA8B;AAC9B,GAAIE,CAAAA,MAAM,CAAGV,QAAQ,CAACW,MAAtB,CAA8B;AAC9B,GAAIF,QAAQ,GAAK,CAAjB,CAAoB,CAClB;AACAA,QAAQ,CAAGA,QAAQ,CAAGC,MAAtB,CACD,CAED,mBACE,oBAAC,KAAD,CAAO,QAAP,MACGV,QAAQ,CAACY,GAAT,CAAa,SAACC,OAAD,CAAUC,KAAV,CAAoB,CAChC;AACAL,QAAQ,CAAGA,QAAQ,CAAG,CAAtB,CACA;AAEA,GAAIM,CAAAA,SAAS,CAAG,aAAeV,QAAf,CAA0B,GAA1B,CAAgCQ,OAAhD,CACA,GAAIG,CAAAA,OAAO,CAAG,MAAQP,QAAtB,CACA,GAAIQ,CAAAA,SAAS,CAAGJ,OAAO,GAAK,MAA5B,CACA,GAAIK,CAAAA,OAAO,CAAG,UAAYnB,OAAO,CAACoB,QAAR,CAAiBL,KAAjB,CAA1B,CACA,GAAIM,CAAAA,YAAY,CAAG,cAAgBX,QAAnC,CAEA,mBACE,0BAAI,GAAG,CAAEK,KAAT,CAAgB,SAAS,CAAEC,SAA3B,eACE,6BACE,IAAI,CAAC,OADP,CAEE,IAAI,CAAER,cAFR,CAGE,EAAE,CAAES,OAHN,CAIE,cAAc,CAAEC,SAJlB,CAKE,QAAQ,CAAER,QALZ,EADF,cASE,6BAAO,OAAO,CAAEO,OAAhB,CAAyB,QAAQ,CAAEP,QAAnC,eACE,yBAAG,SAAS,CAAES,OAAd,EADF,CATF,cAYE,2BACE,EAAE,CAAEE,YADN,CAEE,SAAS,CAAC,uCAFZ,CAGE,eAAcf,QAHhB,eAKE,oBAAC,QAAD,EACE,GAAG,CAAES,KADP,CAEE,EAAE,CAAEA,KAFN,CAGE,SAAS,CAAEZ,SAHb,CAIE,OAAO,CAAEW,OAJX,EALF,CAZF,CADF,CA2BD,CAtCA,CADH,CADF,CA2CD,C,uBAhEqBlB,KAAK,CAAC0B,S,EAAxBvB,S,CACGwB,W,CAAc1B,O,CAkEvB,cAAeE,CAAAA,SAAf","sourcesContent":["import * as React from \"react\";\nimport { AppData } from \"./appdata\";\nimport SkillTab from \"./skillTab\";\n\nclass SkillTabs extends React.Component {\n  static contextType = AppData;\n  render() {\n    const context = this.context;\n\n    const tabtypes = context.tabTypes;\n    const skilllist = this.props.catSkills;\n    const listtype = this.props.skilltype;\n    const radioGroupName = \"skillTabs\" + this.props.id;\n\n    // This is how to build a sequential counter in React for nested mappings.\n    // Problem: Increment a counter from a child that lives in the parent for unique sequential HTML attributes.\n    // We can't do this in React, so here's how to get around that.\n    // STEP 1: Establish increment terms. Pay attention here!\n    let uniqueId = this.props.id; // Will be zero on first parent iteration.\n    let idStep = tabtypes.length; // # of parent iterations\n    if (uniqueId !== 0) {\n      // happens after the first iteration from parent\n      uniqueId = uniqueId * idStep;\n    }\n\n    return (\n      <React.Fragment>\n        {tabtypes.map((tabtype, index) => {\n          // STEP 2: increment\n          uniqueId = uniqueId + 1;\n          //console.log(\"Unique sequential count: \" + uniqueId);\n\n          let tabsClass = \"res-skill-\" + listtype + \" \" + tabtype;\n          let radioId = \"tab\" + uniqueId;\n          let isChecked = tabtype === \"info\";\n          let tabIcon = \"fas fa-\" + context.tabIcons[index];\n          let tabContentId = \"tab-content\" + uniqueId;\n\n          return (\n            <li key={index} className={tabsClass}>\n              <input\n                type=\"radio\"\n                name={radioGroupName}\n                id={radioId}\n                defaultChecked={isChecked}\n                tabIndex={uniqueId}\n              />\n\n              <label htmlFor={radioId} tabIndex={uniqueId}>\n                <i className={tabIcon}></i>\n              </label>\n              <div\n                id={tabContentId}\n                className=\"tab-content sketchy-border lined thin\"\n                data-display={listtype}\n              >\n                <SkillTab\n                  key={index}\n                  id={index}\n                  skilldata={skilllist}\n                  tabtype={tabtype}\n                />\n              </div>\n            </li>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SkillTabs;\n"]},"metadata":{},"sourceType":"module"}